#!markdown

# `Streams` et `Yield`

#!markdown

## `Iterator` pattern

On va utiliser le type `IEnumerable<T>` et le mot clé `yield` pour construire un `Stream`.

#!csharp

var numbers = GetNumbers();

foreach(var number in numbers)
{
    Console.WriteLine(number);
}

public IEnumerable<int> GetNumbers()
{
    yield return 1;
    yield return 2;
    yield return 3;
    yield return 4;
}

#!markdown

`yield` permet de renvoyer les valeurs une par une, C'est très différent que de renvoyer une liste entière de valeurs.
En fait `var numbers = GetNumbers()` ne va chercher que la première valeur, puis les autres valeurs dans le `foreach`.

#!markdown

## Exécution du code
Il faut faire attention avec `Iterator Pattern` au nombre d'appels au procédure de code.

#!csharp

Console.WriteLine("Assign numbers");
var numbers = GetNumbers();

Console.WriteLine("Foreach Loop");
foreach(var number in numbers)
{
    Console.WriteLine(number);
}

Console.WriteLine("Foreach Loop");
foreach(var number in numbers)
{
    Console.WriteLine(number);
}

IEnumerable<int> GetNumbers()
{
    Console.WriteLine("GetNumbers is called");
    yield return NumberGenerator();
    yield return NumberGenerator();
    yield return NumberGenerator();
    yield return NumberGenerator();
}

int NumberGenerator()
{
    Console.WriteLine("Number Generator is called");
    var randNumber = new Random();
     
     return randNumber.Next(1, 10);
}

#!markdown

On voit ici que le code `NumberGenerator` est appelé huit fois, même si la première ligne de `GetNumbers`n'est elle appelée que deux fois.
En fait un pointeur dans le code de la méthode est placé après chaque `yield return`, cela peut être gourmand en ressource notament dans le cas d'un appel en base de données.
On peut résoudre ce problème en utilisant `ToList` (comme souvant avec `EF Core`)

#!csharp

var numbers = GetNumbers().ToList();

Console.WriteLine("Foreach Loop");
foreach(var number in numbers)
{
    Console.WriteLine(number);
}

Console.WriteLine("Foreach Loop");
foreach(var number in numbers)
{
    Console.WriteLine(number);
}

#!markdown

ici le `ToList` exécute toutes les itérations et transmet une `List<int>` à `numbers`.
`NumberGenerator`n'est exécuté que 4 fois ce qui est le minimum nécessaire.
On comprend mieux l'utilisation de `ToList` lorsqu'on utilise `EF Core`.
